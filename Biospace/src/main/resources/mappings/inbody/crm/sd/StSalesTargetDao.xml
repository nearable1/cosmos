<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.inbody.crm.sd.dao.StSalesTargetDao">
    
	<sql id="stSalesTargetColumns">
		a.id AS "id",
		a.proc_ins_id AS "procInsId",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag",
		a.employee_no AS "employeeNo",
		a.year AS "year",
		a.organize AS "organize",
		a.if_auto_apport AS "ifAutoApport",
		a.total_amount AS "totalAmount",
		a.first_quarter AS "firstQuarter",
		a.second_quarter AS "secondQuarter",
		a.third_quarter AS "thirdQuarter",
		a.fourth_quarter AS "fourthQuarter"
	</sql>
	
	<sql id="stSalesTargetJoins">
	</sql>
    
	<select id="get" resultType="StSalesTarget">
		SELECT 
			<include refid="stSalesTargetColumns"/>
		FROM st_sales_target a
		<include refid="stSalesTargetJoins"/>
		WHERE a.id = #{id}
	</select>
    
	<select id="getStSalesTargetList" resultType="StSalesTarget">
		SELECT 
			<include refid="stSalesTargetColumns"/>
		FROM st_sales_target a
		<where>
			a.del_flag = '0'
			<if test="year != null and year != ''">
				and a.year = #{year}
			</if>
			<if test="organize != null and organize != ''">
				and a.organize = #{organize}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.employee_no, a.organize
			</otherwise>
		</choose>
	</select>
	
	<delete id="deleteStSalesTargetInfo">
		delete from st_sales_target
		<where>
			del_flag = '0'
			<if test="year != null and year != ''">
				and year = #{year}
			</if>
			<if test="organize != null and organize != ''">
				and organize = #{organize}
			</if>
			<if test="employeeNo != null and employeeNo != ''">
				and employee_no = #{employeeNo}
			</if>
		</where>
	</delete>
	
	<select id="findList" resultType="StSalesTarget">
		SELECT 
			<include refid="stSalesTargetColumns"/>
		FROM st_sales_target a
		<include refid="stSalesTargetJoins"/>
		<where>
			a.del_flag = '0'
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="StSalesTarget">
		SELECT 
			<include refid="stSalesTargetColumns"/>
		FROM st_sales_target a
		<include refid="stSalesTargetJoins"/>
		<where>
			a.del_flag = '0'
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<sql id="trackSqlEmployee">
		(SELECT 
			temp1.RESPONSIBLE_PERSON_ID AS employeeNo,
			temp1.ORGANIZE AS organize,
			MAX(su.NAME) AS employeeName,
			MAX(su.del_flag) AS delFlag,
			MAX(sof.NAME) AS organizeName,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 1 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly1,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 1 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly1,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 2 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly2,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 2 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly2,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 3 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly3,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 3 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly3,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 4 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly4,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 4 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly4,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 5 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly5,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 5 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly5,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 6 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly6,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 6 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly6,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 7 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly7,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 7 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly7,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 8 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly8,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 8 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly8,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 9 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly9,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 9 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly9,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 10 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly10,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 10 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly10,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 11 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly11,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 11 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly11,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 12 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly12,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 12 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly12,
			SUM(temp1.pre_total_delivered) AS preTotalDelivered,
			SUM(temp1.after_total_delivered) AS afterTotalDelivered,
			SUM(temp1.pre_total_undelivered) AS preTotalUndelivered,
			SUM(temp1.after_total_undelivered) AS afterTotalUndelivered,
			SUM(temp3.COMMISSION) AS commission
		FROM
		(
		SELECT 
			temp0.ORDER_NO AS ORDER_NO,
			temp0.LINE_NO AS LINE_NO,
			temp0.RESPONSIBLE_PERSON_ID AS RESPONSIBLE_PERSON_ID,
			temp0.ORGANIZE AS ORGANIZE,
			temp0.pre_total_delivered AS pre_total_delivered,
			temp0.after_total_delivered AS after_total_delivered,
			temp0.pre_total_undelivered AS pre_total_undelivered,
			temp0.after_total_undelivered AS after_total_undelivered
		FROM
			(SELECT 
				so.ORDER_NO AS ORDER_NO,
				sod.LINE_NO AS LINE_NO,
				sod.RESPONSIBLE_PERSON_ID AS RESPONSIBLE_PERSON_ID,
				sod.ORGANIZE AS ORGANIZE,
				NULL AS pre_total_delivered,
				NULL AS after_total_delivered,
				NULL AS pre_total_undelivered,
				NULL AS after_total_undelivered
			FROM
				so_order_dtl sod
			INNER JOIN so_order so ON sod.order_id = so.id
				AND so.DEL_FLAG = '0'
				AND so.WORKFLOW_STATUS = '50'
				AND so.INVOICE_STATUS IN ('30')
			WHERE
				sod.IF_EFFECTIVE = '0' AND sod.DEL_FLAG = '0'
			UNION ALL
			SELECT 
				so.ORDER_NO AS ORDER_NO,
				sod.LINE_NO AS LINE_NO,
				sod.RESPONSIBLE_PERSON_ID AS RESPONSIBLE_PERSON_ID,
				sod.ORGANIZE AS ORGANIZE,
				CONVERT(((sod.DELIVER_NUM - (CASE WHEN sod.INVOICE_NUM IS NULL THEN 0 ELSE sod.INVOICE_NUM END)) * sod.UNIT_PRICE),decimal(15,2)) AS pre_total_delivered,
				CASE WHEN so.ORDER_TYPE != '2' THEN CONVERT((((sod.DELIVER_NUM - (CASE WHEN sod.INVOICE_NUM IS NULL THEN 0 ELSE sod.INVOICE_NUM END)) * sod.UNIT_PRICE) / 1.17),decimal(15,2)) ELSE CONVERT(((sod.DELIVER_NUM - (CASE WHEN sod.INVOICE_NUM IS NULL THEN 0 ELSE sod.INVOICE_NUM END)) * sod.UNIT_PRICE),decimal(15,2)) END AS after_total_delivered,
				NULL AS pre_total_undelivered,
				NULL AS after_total_undelivered
			FROM
				so_order_dtl sod
			INNER JOIN so_order so ON sod.order_id = so.id
				AND so.DEL_FLAG = '0'
				AND so.WORKFLOW_STATUS = '50'
				AND so.INVOICE_STATUS IN ('20', '10')
				AND so.DELIVER_STATUS IN ('20', '30')
			WHERE
				sod.IF_EFFECTIVE = '0' AND sod.DEL_FLAG = '0'
			UNION ALL
			SELECT 
				so.ORDER_NO AS ORDER_NO,
				sod.LINE_NO AS LINE_NO,
				sod.RESPONSIBLE_PERSON_ID AS RESPONSIBLE_PERSON_ID,
				sod.ORGANIZE AS ORGANIZE,
				NULL AS pre_total_delivered,
				NULL AS after_total_delivered,
				CONVERT(((sod.NUM - (CASE WHEN sod.INVOICE_NUM IS NULL THEN 0 ELSE sod.INVOICE_NUM END)) * sod.UNIT_PRICE),decimal(15,2)) AS pre_total_undelivered,
				CASE WHEN so.ORDER_TYPE != '2' THEN CONVERT((((sod.NUM - (CASE WHEN sod.INVOICE_NUM IS NULL THEN 0 ELSE sod.INVOICE_NUM END)) * sod.UNIT_PRICE) / 1.17),decimal(15,2)) ELSE CONVERT(((sod.NUM - (CASE WHEN sod.INVOICE_NUM IS NULL THEN 0 ELSE sod.INVOICE_NUM END)) * sod.UNIT_PRICE),decimal(15,2)) END AS after_total_undelivered
			FROM
				so_order_dtl sod
			INNER JOIN so_order so ON sod.order_id = so.id
				AND so.DEL_FLAG = '0'
				AND so.WORKFLOW_STATUS = '50'
				AND so.INVOICE_STATUS IN ('20', '10')
				AND so.DELIVER_STATUS IN ('10')
			WHERE
				sod.IF_EFFECTIVE = '0' AND sod.DEL_FLAG = '0') temp0
		WHERE LENGTH(trim(IFNULL(temp0.RESPONSIBLE_PERSON_ID, ''))) > 0
		ORDER BY temp0.ORDER_NO, temp0.LINE_NO, temp0.RESPONSIBLE_PERSON_ID, temp0.ORGANIZE
		) temp1
		INNER JOIN 
		(
		SELECT
			iid.ORDER_NO AS ORDER_NO,
			iid.LINE_NO AS LINE_NO,
			DATE_FORMAT(iid.INVOICE_DATE, '%Y%m') AS INVOICE_DATE,
			iid.INVOICE_AMOUNT AS PRE_INVOICE_AMOUNT,
			CASE WHEN so.ORDER_TYPE != '2' THEN CONVERT((iid.INVOICE_AMOUNT / 1.17),decimal(15,2)) ELSE iid.INVOICE_AMOUNT END AS AFTER_INVOICE_AMOUNT
		FROM
			im_invoice_dtl iid
		INNER JOIN im_invoice ii ON iid.APP_ID = ii.ID AND ii.WORKFLOW_STATUS = '50' AND ii.DEL_FLAG = '0'
		INNER JOIN so_order so ON so.ORDER_NO = iid.ORDER_NO AND so.WORKFLOW_STATUS = '50' AND so.DEL_FLAG = '0'
		WHERE
			iid.INVOICE_DATE IS NOT NULL AND iid.INVOICE_SOURCE = '10'
			<if test="year != null and year != ''">
				AND DATE_FORMAT(iid.INVOICE_DATE, '%Y') = #{year}
			</if>
		ORDER BY
			iid.ORDER_NO,
			iid.LINE_NO,
			DATE_FORMAT(iid.INVOICE_DATE, '%Y%m')
		) temp2 ON temp1.ORDER_NO = temp2.ORDER_NO AND temp1.LINE_NO = temp2.LINE_NO
		LEFT JOIN
		(
		SELECT 
			so.ORDER_NO AS ORDER_NO,
			so.COMMISSION AS COMMISSION
		FROM
			so_order so
		INNER JOIN 
			(
				SELECT
					iid.ORDER_NO AS ORDER_NO,
					MAX(iid.INVOICE_DATE) AS INVOICE_DATE
				FROM im_invoice_dtl iid
				INNER JOIN im_invoice ii ON iid.APP_ID = ii.ID AND ii.WORKFLOW_STATUS = '50' AND ii.DEL_FLAG = '0'
				WHERE iid.INVOICE_DATE IS NOT NULL AND iid.INVOICE_SOURCE = '10'
				GROUP BY iid.ORDER_NO
			) TEMP ON so.ORDER_NO = TEMP.ORDER_NO
			<if test="year != null and year != ''">
				AND DATE_FORMAT(TEMP.INVOICE_DATE, '%Y') = #{year}
			</if>
		WHERE
			so.WORKFLOW_STATUS = '50' AND so.DEL_FLAG = '0'
		) temp3 ON temp1.ORDER_NO = temp3.ORDER_NO
		INNER JOIN SYS_USER su ON su.ID = temp1.RESPONSIBLE_PERSON_ID
		LEFT JOIN SYS_OFFICE sof ON sof.ID = temp1.ORGANIZE
		<where>
			<if test="organize != null and organize != ''">
				temp1.ORGANIZE = #{organize}
			</if>
			<if test="sqlMap != null and sqlMap.dataScope != null">
				AND temp1.RESPONSIBLE_PERSON_ID in ${sqlMap.dataScope}
			</if>
		</where>
		GROUP BY temp1.RESPONSIBLE_PERSON_ID, temp1.ORGANIZE)
		UNION ALL
		(SELECT 
			temp1.RESPONSIBLE_PERSON_ID AS employeeNo,
			temp1.ORGANIZE AS organize,
			MAX(su.NAME) AS employeeName,
			MAX(su.del_flag) AS delFlag,
			MAX(sof.NAME) AS organizeName,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 1 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly1,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 1 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly1,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 2 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly2,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 2 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly2,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 3 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly3,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 3 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly3,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 4 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly4,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 4 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly4,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 5 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly5,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 5 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly5,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 6 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly6,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 6 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly6,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 7 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly7,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 7 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly7,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 8 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly8,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 8 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly8,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 9 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly9,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 9 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly9,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 10 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly10,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 10 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly10,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 11 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly11,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 11 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly11,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 12 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly12,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 12 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly12,
			NULL AS preTotalDelivered,
			NULL AS afterTotalDelivered,
			NULL AS preTotalUndelivered,
			NULL AS afterTotalUndelivered,
			NULL AS commission
		FROM
		(
			SELECT
				rq.QUOTATION_NO AS ORDER_NO,
				rq.RESPONSIBLE_PERSON_ID AS RESPONSIBLE_PERSON_ID,
				rqd.LINE_NO AS LINE_NO,
				rq.ORGANIZE AS ORGANIZE
			FROM RM_QUOTATION_DTL rqd
			INNER JOIN RM_QUOTATION rq ON rqd.REPAIR_NO = rq.REPAIR_NO AND rqd.quotation_no = rq.quotation_no AND rq.del_flag = '0'
			WHERE LENGTH(trim(IFNULL(rq.RESPONSIBLE_PERSON_ID, ''))) > 0
		) temp1
		INNER JOIN 
		(
		SELECT
			iid.ORDER_NO AS ORDER_NO,
			iid.LINE_NO AS LINE_NO,
			DATE_FORMAT(iid.INVOICE_DATE, '%Y%m') AS INVOICE_DATE,
			SUM(iid.INVOICE_AMOUNT) AS PRE_INVOICE_AMOUNT,
			SUM(CONVERT((iid.INVOICE_AMOUNT / 1.17),decimal(15,2))) AS AFTER_INVOICE_AMOUNT
		FROM
			im_invoice_dtl iid
		INNER JOIN im_invoice ii ON iid.APP_ID = ii.ID AND ii.WORKFLOW_STATUS = '50' AND ii.DEL_FLAG = '0'
		WHERE
			iid.INVOICE_DATE IS NOT NULL AND iid.INVOICE_SOURCE = '20'
			<if test="year != null and year != ''">
				AND DATE_FORMAT(iid.INVOICE_DATE, '%Y') = #{year}
			</if>
		GROUP BY
			iid.ORDER_NO,
			iid.LINE_NO,
			DATE_FORMAT(iid.INVOICE_DATE, '%Y%m')
		) temp2 ON temp1.ORDER_NO = temp2.ORDER_NO AND temp1.LINE_NO = temp2.LINE_NO
		INNER JOIN SYS_USER su ON su.ID = temp1.RESPONSIBLE_PERSON_ID
		LEFT JOIN SYS_OFFICE sof ON sof.ID = temp1.ORGANIZE
		<where>
			<if test="organize != null and organize != ''">
				temp1.ORGANIZE = #{organize}
			</if>
			<if test="sqlMap != null and sqlMap.dataScope != null">
				AND temp1.RESPONSIBLE_PERSON_ID in ${sqlMap.dataScope}
			</if>
		</where>
		GROUP BY temp1.RESPONSIBLE_PERSON_ID, temp1.ORGANIZE)
	</sql>
	
	<sql id="targetSqlEmployee">
		SELECT 
			a.employee_no AS employeeNo,
			a.organize AS organize,
			su.NAME AS employeeName,
			su.del_flag AS delFlag,
			sof.NAME AS organizeName,
			a.total_amount AS total_amount
		FROM st_sales_target a
		INNER JOIN SYS_USER su ON su.ID = a.employee_no
		LEFT JOIN SYS_OFFICE sof ON sof.ID = a.organize
		<where>
			a.del_flag = '0'
			<if test="year != null and year != ''">
				AND a.year = #{year}
			</if>
			<if test="organize != null and organize != ''">
				AND a.organize = #{organize}
			</if>
			<if test="sqlMap != null and sqlMap.dataScope != null">
				AND a.employee_no in ${sqlMap.dataScope}
			</if>
		</where>
	</sql>
	
	<select id="getEmployeeCompareStSalesTargetDtl" resultType="StSalesTargetCompare">
		SELECT
			track.employeeNo AS "employeeNo",
			track.organize AS "organize",
			track.employeeName AS "employeeName",
			track.delFlag AS "delFlag",
			track.organizeName AS "organizeName",
			track.preTotalMonthly1 AS "preTotalMonthly1",
			track.afterTotalMonthly1 AS "afterTotalMonthly1",
			track.preTotalMonthly2 AS "preTotalMonthly2",
			track.afterTotalMonthly2 AS "afterTotalMonthly2",
			track.preTotalMonthly3 AS "preTotalMonthly3",
			track.afterTotalMonthly3 AS "afterTotalMonthly3",
			track.preTotalMonthly4 AS "preTotalMonthly4",
			track.afterTotalMonthly4 AS "afterTotalMonthly4",
			track.preTotalMonthly5 AS "preTotalMonthly5",
			track.afterTotalMonthly5 AS "afterTotalMonthly5",
			track.preTotalMonthly6 AS "preTotalMonthly6",
			track.afterTotalMonthly6 AS "afterTotalMonthly6",
			track.preTotalMonthly7 AS "preTotalMonthly7",
			track.afterTotalMonthly7 AS "afterTotalMonthly7",
			track.preTotalMonthly8 AS "preTotalMonthly8",
			track.afterTotalMonthly8 AS "afterTotalMonthly8",
			track.preTotalMonthly9 AS "preTotalMonthly9",
			track.afterTotalMonthly9 AS "afterTotalMonthly9",
			track.preTotalMonthly10 AS "preTotalMonthly10",
			track.afterTotalMonthly10 AS "afterTotalMonthly10",
			track.preTotalMonthly11 AS "preTotalMonthly11",
			track.afterTotalMonthly11 AS "afterTotalMonthly11",
			track.preTotalMonthly12 AS "preTotalMonthly12",
			track.afterTotalMonthly12 AS "afterTotalMonthly12",
			track.preTotalDelivered AS "preTotalDelivered",
			track.afterTotalDelivered AS "afterTotalDelivered",
			track.preTotalUndelivered AS "preTotalUndelivered",
			track.afterTotalUndelivered AS "afterTotalUndelivered",
			track.commission AS "commission",
			target.total_amount AS "totalTarget"
		FROM (<include refid="trackSqlEmployee"/>) track
		LEFT JOIN (<include refid="targetSqlEmployee"/>) target
		ON track.employeeNo = target.employeeNo AND track.organize = target.organize
		UNION
		SELECT
			target.employeeNo AS "employeeNo",
			target.organize AS "organize",
			target.employeeName AS "employeeName",
			target.delFlag AS "delFlag",
			target.organizeName AS "organizeName",
			track.preTotalMonthly1 AS "preTotalMonthly1",
			track.afterTotalMonthly1 AS "afterTotalMonthly1",
			track.preTotalMonthly2 AS "preTotalMonthly2",
			track.afterTotalMonthly2 AS "afterTotalMonthly2",
			track.preTotalMonthly3 AS "preTotalMonthly3",
			track.afterTotalMonthly3 AS "afterTotalMonthly3",
			track.preTotalMonthly4 AS "preTotalMonthly4",
			track.afterTotalMonthly4 AS "afterTotalMonthly4",
			track.preTotalMonthly5 AS "preTotalMonthly5",
			track.afterTotalMonthly5 AS "afterTotalMonthly5",
			track.preTotalMonthly6 AS "preTotalMonthly6",
			track.afterTotalMonthly6 AS "afterTotalMonthly6",
			track.preTotalMonthly7 AS "preTotalMonthly7",
			track.afterTotalMonthly7 AS "afterTotalMonthly7",
			track.preTotalMonthly8 AS "preTotalMonthly8",
			track.afterTotalMonthly8 AS "afterTotalMonthly8",
			track.preTotalMonthly9 AS "preTotalMonthly9",
			track.afterTotalMonthly9 AS "afterTotalMonthly9",
			track.preTotalMonthly10 AS "preTotalMonthly10",
			track.afterTotalMonthly10 AS "afterTotalMonthly10",
			track.preTotalMonthly11 AS "preTotalMonthly11",
			track.afterTotalMonthly11 AS "afterTotalMonthly11",
			track.preTotalMonthly12 AS "preTotalMonthly12",
			track.afterTotalMonthly12 AS "afterTotalMonthly12",
			track.preTotalDelivered AS "preTotalDelivered",
			track.afterTotalDelivered AS "afterTotalDelivered",
			track.preTotalUndelivered AS "preTotalUndelivered",
			track.afterTotalUndelivered AS "afterTotalUndelivered",
			track.commission AS "commission",
			target.total_amount AS "totalTarget"
		FROM (<include refid="targetSqlEmployee"/>) target
		LEFT JOIN (<include refid="trackSqlEmployee"/>) track
		ON track.employeeNo = target.employeeNo AND track.organize = target.organize
		ORDER BY organizeName, delFlag, employeeName
	</select>
	
	<sql id="trackSqlOrganize">
		(SELECT 
			temp1.ORGANIZE AS organize,
			MAX(sof.NAME) AS organizeName,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 1 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly1,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 1 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly1,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 2 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly2,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 2 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly2,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 3 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly3,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 3 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly3,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 4 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly4,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 4 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly4,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 5 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly5,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 5 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly5,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 6 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly6,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 6 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly6,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 7 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly7,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 7 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly7,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 8 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly8,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 8 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly8,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 9 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly9,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 9 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly9,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 10 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly10,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 10 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly10,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 11 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly11,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 11 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly11,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 12 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly12,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 12 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly12,
			SUM(temp1.pre_total_delivered) AS preTotalDelivered,
			SUM(temp1.after_total_delivered) AS afterTotalDelivered,
			SUM(temp1.pre_total_undelivered) AS preTotalUndelivered,
			SUM(temp1.after_total_undelivered) AS afterTotalUndelivered,
			SUM(temp3.COMMISSION) AS commission
		FROM
		(
		SELECT
			temp0.ORDER_NO AS ORDER_NO,
			temp0.LINE_NO AS LINE_NO,
			temp0.ORGANIZE AS ORGANIZE,
			temp0.pre_total_delivered AS pre_total_delivered,
			temp0.after_total_delivered AS after_total_delivered,
			temp0.pre_total_undelivered AS pre_total_undelivered,
			temp0.after_total_undelivered AS after_total_undelivered
		FROM
			(SELECT 
				so.ORDER_NO AS ORDER_NO,
				sod.LINE_NO AS LINE_NO,
				sod.ORGANIZE AS ORGANIZE,
				NULL AS pre_total_delivered,
				NULL AS after_total_delivered,
				NULL AS pre_total_undelivered,
				NULL AS after_total_undelivered
			FROM
				so_order_dtl sod
			INNER JOIN so_order so ON sod.order_id = so.id
				AND so.DEL_FLAG = '0'
				AND so.WORKFLOW_STATUS = '50'
				AND so.INVOICE_STATUS IN ('30')
			WHERE
				sod.IF_EFFECTIVE = '0' AND sod.DEL_FLAG = '0'
			UNION ALL
			SELECT 
				so.ORDER_NO AS ORDER_NO,
				sod.LINE_NO AS LINE_NO,
				sod.ORGANIZE AS ORGANIZE,
				CONVERT(((sod.DELIVER_NUM - (CASE WHEN sod.INVOICE_NUM IS NULL THEN 0 ELSE sod.INVOICE_NUM END)) * sod.UNIT_PRICE),decimal(15,2)) AS pre_total_delivered,
				CASE WHEN so.ORDER_TYPE != '2' THEN CONVERT((((sod.DELIVER_NUM - (CASE WHEN sod.INVOICE_NUM IS NULL THEN 0 ELSE sod.INVOICE_NUM END)) * sod.UNIT_PRICE) / 1.17),decimal(15,2)) ELSE CONVERT(((sod.DELIVER_NUM - (CASE WHEN sod.INVOICE_NUM IS NULL THEN 0 ELSE sod.INVOICE_NUM END)) * sod.UNIT_PRICE),decimal(15,2)) END AS after_total_delivered,
				NULL AS pre_total_undelivered,
				NULL AS after_total_undelivered
			FROM
				so_order_dtl sod
			INNER JOIN so_order so ON sod.order_id = so.id
				AND so.DEL_FLAG = '0'
				AND so.WORKFLOW_STATUS = '50'
				AND so.INVOICE_STATUS IN ('20', '10')
				AND so.DELIVER_STATUS IN ('20', '30')
			WHERE
				sod.IF_EFFECTIVE = '0' AND sod.DEL_FLAG = '0'
			UNION
			SELECT 
				so.ORDER_NO AS ORDER_NO,
				sod.LINE_NO AS LINE_NO,
				sod.ORGANIZE AS ORGANIZE,
				NULL AS pre_total_delivered,
				NULL AS after_total_delivered,
				CONVERT(((sod.NUM - (CASE WHEN sod.INVOICE_NUM IS NULL THEN 0 ELSE sod.INVOICE_NUM END)) * sod.UNIT_PRICE),decimal(15,2)) AS pre_total_undelivered,
				CASE WHEN so.ORDER_TYPE != '2' THEN CONVERT((((sod.NUM - (CASE WHEN sod.INVOICE_NUM IS NULL THEN 0 ELSE sod.INVOICE_NUM END)) * sod.UNIT_PRICE) / 1.17),decimal(15,2)) ELSE CONVERT(((sod.NUM - (CASE WHEN sod.INVOICE_NUM IS NULL THEN 0 ELSE sod.INVOICE_NUM END)) * sod.UNIT_PRICE),decimal(15,2)) END AS after_total_undelivered
			FROM
				so_order_dtl sod
			INNER JOIN so_order so ON sod.order_id = so.id
				AND so.DEL_FLAG = '0'
				AND so.WORKFLOW_STATUS = '50'
				AND so.INVOICE_STATUS IN ('20', '10')
				AND so.DELIVER_STATUS IN ('10')
			WHERE
				sod.IF_EFFECTIVE = '0' AND sod.DEL_FLAG = '0') temp0
		WHERE LENGTH(trim(IFNULL(temp0.ORGANIZE, ''))) > 0
		ORDER BY temp0.ORDER_NO, temp0.LINE_NO, temp0.ORGANIZE
		) temp1
		INNER JOIN 
		(
		SELECT
			iid.ORDER_NO AS ORDER_NO,
			iid.LINE_NO AS LINE_NO,
			DATE_FORMAT(iid.INVOICE_DATE, '%Y%m') AS INVOICE_DATE,
			iid.INVOICE_AMOUNT AS PRE_INVOICE_AMOUNT,
			CASE WHEN so.ORDER_TYPE != '2' THEN CONVERT((iid.INVOICE_AMOUNT / 1.17),decimal(15,2)) ELSE iid.INVOICE_AMOUNT END AS AFTER_INVOICE_AMOUNT
		FROM
			im_invoice_dtl iid
		INNER JOIN im_invoice ii ON iid.APP_ID = ii.ID AND ii.WORKFLOW_STATUS = '50' AND ii.DEL_FLAG = '0'
		INNER JOIN so_order so ON so.ORDER_NO = iid.ORDER_NO AND so.WORKFLOW_STATUS = '50' AND so.DEL_FLAG = '0'
		WHERE
			iid.INVOICE_DATE IS NOT NULL AND iid.INVOICE_SOURCE = '10'
			<if test="year != null and year != ''">
				AND DATE_FORMAT(iid.INVOICE_DATE, '%Y') = #{year}
			</if>
		ORDER BY
			iid.ORDER_NO,
			iid.LINE_NO,
			DATE_FORMAT(iid.INVOICE_DATE, '%Y%m')
		) temp2 ON temp1.ORDER_NO = temp2.ORDER_NO AND temp1.LINE_NO = temp2.LINE_NO
		LEFT JOIN
		(
		SELECT 
			so.ORDER_NO AS ORDER_NO,
			so.COMMISSION AS COMMISSION
		FROM
			so_order so
		INNER JOIN 
			(
				SELECT
					iid.ORDER_NO AS ORDER_NO,
					MAX(iid.INVOICE_DATE) AS INVOICE_DATE
				FROM im_invoice_dtl iid
				INNER JOIN im_invoice ii ON iid.APP_ID = ii.ID AND ii.WORKFLOW_STATUS = '50' AND ii.DEL_FLAG = '0'
				WHERE iid.INVOICE_DATE IS NOT NULL AND iid.INVOICE_SOURCE = '10'
				GROUP BY iid.ORDER_NO
			) TEMP ON so.ORDER_NO = TEMP.ORDER_NO
			<if test="year != null and year != ''">
				AND DATE_FORMAT(TEMP.INVOICE_DATE, '%Y') = #{year}
			</if>
		WHERE
			so.WORKFLOW_STATUS = '50' AND so.DEL_FLAG = '0'
		) temp3 ON temp1.ORDER_NO = temp3.ORDER_NO
		INNER JOIN SYS_OFFICE sof ON sof.ID = temp1.ORGANIZE
		<where>
			<if test="organize != null and organize != ''">
				temp1.ORGANIZE = #{organize}
			</if>
		</where>
		GROUP BY temp1.ORGANIZE)
		UNION ALL
		(SELECT 
			temp1.ORGANIZE AS organize,
			MAX(sof.NAME) AS organizeName,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 1 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly1,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 1 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly1,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 2 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly2,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 2 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly2,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 3 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly3,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 3 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly3,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 4 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly4,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 4 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly4,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 5 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly5,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 5 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly5,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 6 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly6,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 6 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly6,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 7 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly7,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 7 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly7,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 8 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly8,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 8 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly8,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 9 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly9,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 9 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly9,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 10 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly10,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 10 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly10,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 11 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly11,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 11 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly11,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 12 THEN temp2.PRE_INVOICE_AMOUNT ELSE NULL END) AS preTotalMonthly12,
			SUM(CASE WHEN CAST(RIGHT(temp2.INVOICE_DATE, 2) AS UNSIGNED INTEGER) = 12 THEN temp2.AFTER_INVOICE_AMOUNT ELSE NULL END) AS afterTotalMonthly12,
			NULL AS preTotalDelivered,
			NULL AS afterTotalDelivered,
			NULL AS preTotalUndelivered,
			NULL AS afterTotalUndelivered,
			NULL AS commission
		FROM
		(
			SELECT
				rq.QUOTATION_NO AS ORDER_NO,
				rqd.LINE_NO AS LINE_NO,
				rq.ORGANIZE AS ORGANIZE
			FROM RM_QUOTATION_DTL rqd
			INNER JOIN RM_QUOTATION rq ON rqd.REPAIR_NO = rq.REPAIR_NO AND rqd.quotation_no = rq.quotation_no AND rq.del_flag = '0'
			WHERE LENGTH(trim(IFNULL(rq.ORGANIZE, ''))) > 0
		) temp1
		INNER JOIN 
		(
		SELECT
			iid.ORDER_NO AS ORDER_NO,
			iid.LINE_NO AS LINE_NO,
			DATE_FORMAT(iid.INVOICE_DATE, '%Y%m') AS INVOICE_DATE,
			SUM(iid.INVOICE_AMOUNT) AS PRE_INVOICE_AMOUNT,
			SUM(CONVERT((iid.INVOICE_AMOUNT / 1.17),decimal(15,2))) AS AFTER_INVOICE_AMOUNT
		FROM
			im_invoice_dtl iid
		INNER JOIN im_invoice ii ON iid.APP_ID = ii.ID AND ii.WORKFLOW_STATUS = '50' AND ii.DEL_FLAG = '0'
		WHERE
			iid.INVOICE_DATE IS NOT NULL AND iid.INVOICE_SOURCE = '20'
			<if test="year != null and year != ''">
				AND DATE_FORMAT(iid.INVOICE_DATE, '%Y') = #{year}
			</if>
		GROUP BY
			iid.ORDER_NO,
			iid.LINE_NO,
			DATE_FORMAT(iid.INVOICE_DATE, '%Y%m')
		) temp2 ON temp1.ORDER_NO = temp2.ORDER_NO AND temp1.LINE_NO = temp2.LINE_NO
		INNER JOIN SYS_OFFICE sof ON sof.ID = temp1.ORGANIZE
		<where>
			<if test="organize != null and organize != ''">
				temp1.ORGANIZE = #{organize}
			</if>
		</where>
		GROUP BY temp1.ORGANIZE)
	</sql>
	
	<sql id="targetSqlOrganize">
		SELECT 
			a.organize AS organize,
			MAX(sof.NAME) AS organizeName,
			SUM(a.total_amount) AS total_amount
		FROM st_sales_target a
		INNER JOIN SYS_OFFICE sof ON sof.ID = a.organize
		<where>
			a.del_flag = '0'
			<if test="year != null and year != ''">
				AND a.year = #{year}
			</if>
		</where>
		GROUP BY a.organize
	</sql>
	
	<select id="getOrganizeCompareStSalesTargetDtl" resultType="StSalesTargetCompare">
		SELECT
			track.organize AS "organize",
			track.organizeName AS "organizeName",
			track.preTotalMonthly1 AS "preTotalMonthly1",
			track.afterTotalMonthly1 AS "afterTotalMonthly1",
			track.preTotalMonthly2 AS "preTotalMonthly2",
			track.afterTotalMonthly2 AS "afterTotalMonthly2",
			track.preTotalMonthly3 AS "preTotalMonthly3",
			track.afterTotalMonthly3 AS "afterTotalMonthly3",
			track.preTotalMonthly4 AS "preTotalMonthly4",
			track.afterTotalMonthly4 AS "afterTotalMonthly4",
			track.preTotalMonthly5 AS "preTotalMonthly5",
			track.afterTotalMonthly5 AS "afterTotalMonthly5",
			track.preTotalMonthly6 AS "preTotalMonthly6",
			track.afterTotalMonthly6 AS "afterTotalMonthly6",
			track.preTotalMonthly7 AS "preTotalMonthly7",
			track.afterTotalMonthly7 AS "afterTotalMonthly7",
			track.preTotalMonthly8 AS "preTotalMonthly8",
			track.afterTotalMonthly8 AS "afterTotalMonthly8",
			track.preTotalMonthly9 AS "preTotalMonthly9",
			track.afterTotalMonthly9 AS "afterTotalMonthly9",
			track.preTotalMonthly10 AS "preTotalMonthly10",
			track.afterTotalMonthly10 AS "afterTotalMonthly10",
			track.preTotalMonthly11 AS "preTotalMonthly11",
			track.afterTotalMonthly11 AS "afterTotalMonthly11",
			track.preTotalMonthly12 AS "preTotalMonthly12",
			track.afterTotalMonthly12 AS "afterTotalMonthly12",
			track.preTotalDelivered AS "preTotalDelivered",
			track.afterTotalDelivered AS "afterTotalDelivered",
			track.preTotalUndelivered AS "preTotalUndelivered",
			track.afterTotalUndelivered AS "afterTotalUndelivered",
			track.commission AS "commission",
			target.total_amount AS "totalTarget"
		FROM (<include refid="trackSqlOrganize"/>) track
		LEFT JOIN (<include refid="targetSqlOrganize"/>) target
		ON track.organize = target.organize
		UNION
		SELECT
			target.organize AS "organize",
			target.organizeName AS "organizeName",
			track.preTotalMonthly1 AS "preTotalMonthly1",
			track.afterTotalMonthly1 AS "afterTotalMonthly1",
			track.preTotalMonthly2 AS "preTotalMonthly2",
			track.afterTotalMonthly2 AS "afterTotalMonthly2",
			track.preTotalMonthly3 AS "preTotalMonthly3",
			track.afterTotalMonthly3 AS "afterTotalMonthly3",
			track.preTotalMonthly4 AS "preTotalMonthly4",
			track.afterTotalMonthly4 AS "afterTotalMonthly4",
			track.preTotalMonthly5 AS "preTotalMonthly5",
			track.afterTotalMonthly5 AS "afterTotalMonthly5",
			track.preTotalMonthly6 AS "preTotalMonthly6",
			track.afterTotalMonthly6 AS "afterTotalMonthly6",
			track.preTotalMonthly7 AS "preTotalMonthly7",
			track.afterTotalMonthly7 AS "afterTotalMonthly7",
			track.preTotalMonthly8 AS "preTotalMonthly8",
			track.afterTotalMonthly8 AS "afterTotalMonthly8",
			track.preTotalMonthly9 AS "preTotalMonthly9",
			track.afterTotalMonthly9 AS "afterTotalMonthly9",
			track.preTotalMonthly10 AS "preTotalMonthly10",
			track.afterTotalMonthly10 AS "afterTotalMonthly10",
			track.preTotalMonthly11 AS "preTotalMonthly11",
			track.afterTotalMonthly11 AS "afterTotalMonthly11",
			track.preTotalMonthly12 AS "preTotalMonthly12",
			track.afterTotalMonthly12 AS "afterTotalMonthly12",
			track.preTotalDelivered AS "preTotalDelivered",
			track.afterTotalDelivered AS "afterTotalDelivered",
			track.preTotalUndelivered AS "preTotalUndelivered",
			track.afterTotalUndelivered AS "afterTotalUndelivered",
			track.commission AS "commission",
			target.total_amount AS "totalTarget"
		FROM (<include refid="targetSqlOrganize"/>) target
		LEFT JOIN (<include refid="trackSqlOrganize"/>) track
		ON track.organize = target.organize
		ORDER BY organizeName
	</select>
	
	<insert id="insert">
		INSERT INTO st_sales_target(
			id,
			proc_ins_id,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag,
			employee_no,
			year,
			organize,
			if_auto_apport,
			total_amount,
			first_quarter,
			second_quarter,
			third_quarter,
			fourth_quarter
		) VALUES (
			#{id},
			#{procInsId},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{delFlag},
			#{employeeNo},
			#{year},
			#{organize},
			#{ifAutoApport},
			#{totalAmount},
			#{firstQuarter},
			#{secondQuarter},
			#{thirdQuarter},
			#{fourthQuarter}
		)
	</insert>
	
	<update id="update">
		UPDATE st_sales_target SET 	
			proc_ins_id = #{procInsId},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			employee_no = #{employeeNo},
			year = #{year},
			organize = #{organize},
			if_auto_apport = #{ifAutoApport},
			total_amount = #{totalAmount},
			first_quarter = #{firstQuarter},
			second_quarter = #{secondQuarter},
			third_quarter = #{thirdQuarter},
			fourth_quarter = #{fourthQuarter}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE st_sales_target SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
</mapper>